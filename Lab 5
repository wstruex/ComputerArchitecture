//RAM module
module Lab5_Truex(d_in, address, clk, WR, d_out);

input [31:0]d_in;
input [7:0]address;
input clk, WR;
output [31:0]d_out;

wire [3:0]CS;
wire [31:0]d_out_sig0;
wire [31:0]d_out_sig1;
wire [31:0]d_out_sig2;
wire [31:0]d_out_sig3;

//decoder
decoder decoder0(address[7:6], CS[3:0]);		//module decoder(in, out);

//first row of 4 ram modules
ram64x8 module0(d_in[31:24], address[5:0], WR, clk, CS[0], d_out_sig0[31:24]);
ram64x8 module1(d_in[23:16], address[5:0], WR, clk, CS[0], d_out_sig0[23:16]);
ram64x8 module2(d_in[15:8], address[5:0], WR, clk, CS[0], d_out_sig0[15:8]);
ram64x8 module3(d_in[7:0], address[5:0], WR, clk, CS[0], d_out_sig0[7:0]);

//second row of 4 ram modules
ram64x8 module4(d_in[31:24], address[5:0], WR, clk, CS[1], d_out_sig1[31:24]);
ram64x8 module5(d_in[23:16], address[5:0], WR, clk, CS[1], d_out_sig1[23:16]);
ram64x8 module6(d_in[15:8], address[5:0], WR, clk, CS[1], d_out_sig1[15:8]);
ram64x8 module7(d_in[7:0], address[5:0], WR, clk, CS[1], d_out_sig1[7:0]);

//third row of 4 ram modules
ram64x8 module8(d_in[31:24], address[5:0], WR, clk, CS[2], d_out_sig2[31:24]);
ram64x8 module9(d_in[23:16], address[5:0], WR, clk, CS[2], d_out_sig2[23:16]);
ram64x8 module10(d_in[15:8], address[5:0], WR, clk, CS[2], d_out_sig2[15:8]);
ram64x8 module11(d_in[7:0], address[5:0], WR, clk, CS[2], d_out_sig2[7:0]);

//fourth row of 4 ram modules
ram64x8 module12(d_in[31:24], address[5:0], WR, clk, CS[3], d_out_sig3[31:24]);
ram64x8 module13(d_in[23:16], address[5:0], WR, clk, CS[3], d_out_sig3[23:16]);
ram64x8 module14(d_in[15:8], address[5:0], WR, clk, CS[3], d_out_sig3[15:8]);
ram64x8 module15(d_in[7:0], address[5:0], WR, clk, CS[3], d_out_sig3[7:0]);

//tri state buffer
assign d_out = CS[0] ? d_out_sig0 : 32'bz;
assign d_out = CS[1] ? d_out_sig1 : 32'bz;
assign d_out = CS[2] ? d_out_sig2 : 32'bz;
assign d_out = CS[3] ? d_out_sig3 : 32'bz;

endmodule

//ram module
module ram64x8(d_in, address, WR, clk, CS, d_out);

input [7:0]d_in;
input [5:0]address;
input WR, clk, CS;		//WR = 1: write | WR = 0: read
output [7:0]d_out;

reg [7:0]memarray[63:0]; //data width | name | number of locations
reg [7:0]memout;

//write operation
always @(posedge clk) begin
	if(CS && WR)
		memarray[address] = d_in;
end

//read operation
always @(posedge clk) begin
	memout = memarray[address];
end

//final output
assign d_out = CS ? memout : 8'b0;

endmodule

//decoder
module decoder(in, out);

input [1:0]in;
output reg [3:0]out;         

always @(in) begin
case(in)

2'b00: out = 4'b0001;    
2'b01: out = 4'b0010;
2'b10: out = 4'b0100;
2'b11: out = 4'b1000;

default: out = 0;

endcase
end 

endmodule  

//TESTBENCH
module Lab5_Truex_tb;

reg [31:0]d_in;
reg [7:0]address;
reg clk, WR;
wire [31:0]d_out;

//module Lab5_Truex(d_in, address, clk, WR, d_out);
Lab5_Truex dut(.d_in(d_in), .address(address), .clk(clk), .WR(WR), .d_out(d_out));

initial begin

clk = 0;
forever #2 clk = ~clk;

end

initial begin

WR = 1;
#10 address = 8'b00000001;
#10 d_in = 32'b00000000000000000000000000001111;
#10 address = 8'b10000000;
#10 d_in = 32'b00000000000000000000000011110000;
#10 address = 8'b10011000;
#10 d_in = 32'b00000000000000000000111100000000;
#10 address = 8'b10011011;
#10 d_in = 32'b00000000000000001111000000000000;
#10 address = 8'b00101001;
#10 d_in = 32'b00000000000011110000000000000000;
#10 address = 8'b00000011;
#10 d_in = 32'b00000000111100000000000000000000;
#10 address = 8'b00101100;
#10 d_in = 32'b00001111000000000000000000000000;
#10 address = 8'b01100101;
#10 d_in = 32'b11110000000000000000000000000000;
#10 WR = 0;
#10 address = 8'b01100101;
#10 address = 8'b00101100;
#10 address = 8'b00000011;
#10 address = 8'b00101001;
#10 address = 8'b10011011;
#10 address = 8'b10011000;
#10 address = 8'b10000000;
#10 address = 8'b00000001;

end
endmodule 
