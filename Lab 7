module Lab7_Truex(clk, reset, rd, rs1, rs2, imm);

input clk, reset;
output [4:0]rd;
output [4:0]rs1;
output [4:0]rs2;
output [11:0]imm;

wire [7:0]PCi;
wire [7:0]PCo;
wire [31:0]IS;

pc 			 device0(clk, reset, PCo[7:0], PCi[7:0]);
adder4 		 device1(clk, reset, PCi[7:0], PCo[7:0]);
rom 			 device2(clk, PCi[7:0], IS[31:0]);
inst_decoder device3(IS[31:0], rd[4:0], rs1[4:0], rs2[4:0], imm[11:0]);

endmodule

//program counter module
module pc(clk, reset, pc_in, pc_out);

input clk, reset;
input [7:0]pc_in;
output reg [7:0]pc_out;

always @(posedge clk) begin

if(reset)
	pc_out = 8'd0;
else
	pc_out = pc_in;

end
endmodule 

//add 4 module
module adder4(clk, reset, in, out);

input clk, reset;
input [7:0]in;
output reg [7:0]out;

always @(posedge clk) begin	

if(reset)
	out = 8'd0;
else
	out = in + 8'd4;

end
endmodule 

//rom module
module rom(clk, address, inst_out);

input clk;
input [7:0]address;
output reg [31:0]inst_out;

always @(clk, address) begin
case (address)

//a1 is n, a3 points to a[0], a4 is i, a5 is j, a6 is x
8'd00: inst_out = 32'h00450693; // addi a3, a0, 4 	#a3 is pointer to a[i]
8'd04: inst_out = 32'h00100713; // addi a4, x0, 1 	#i = 1
//outer loop
8'd08: inst_out = 32'h00b76463; // bltu a4, a1, 10 	#if i < n, jump to continue outer loop
//exit outer loop
8'd12: inst_out = 32'h00008067; // jalr x0, x1, 0 		#return from function
//continue outer loop
8'd16: inst_out = 32'h0006a803; // lw a6, 0(a3) 		#x = a[i]
8'd20: inst_out = 32'h00068613; // addi a2, a3, 0 		#a2 is pointer to a[j]
8'd24: inst_out = 32'h00070793; // addi a5, a4, 0 		#j = i
//inner loop
8'd28: inst_out = 32'hffc62883; // lw a7, -4(a2) 		#a7 = a[j-1]
8'd32: inst_out = 32'h01185a63; // bge a6, a7, 34 		#if a[j-1] <= a[i], jump to exit inner loop
8'd36: inst_out = 32'h01162023; // sw a7, 0(a2) 		#a[j] = a[j-1]
8'd40: inst_out = 32'hfff78793; // addi a5, a5, -1 	#j--
8'd44: inst_out = 32'hffc60613; // addi a2, a2, -4		#decrement to a2 to point to a[j]
8'd48: inst_out = 32'hfe0796e3; // bne a5, x0, 1c 		#if j != 0, jump to inner loop
//exit inner loop
8'd52: inst_out = 32'h00279793; // slli a5, a5, 0x2 	#multiply a5 by 4
8'd56: inst_out = 32'h00f507b3; // add a5, a0, a5 		#a5 is now byte address oi a[j]
8'd60: inst_out = 32'h0107a023; // sw a6, 0(a5) 		#a[j] = x
8'd64: inst_out = 32'h00170713; // addi a4, a4, 1 		#i++
8'd68: inst_out = 32'h00468693; // addi a3, a3, 4 		#increment a3 to point to a[i]
8'd72: inst_out = 32'hfc1ff06f; // jal x0, 8 			#jump to outer loop

endcase
end
endmodule 

//instruction decoder module
module inst_decoder(inst_in, rd, rs1, rs2, imm);

input [31:0]inst_in;
output [4:0]rd;
output [4:0]rs1;
output [4:0]rs2;
output [11:0]imm;

assign rd = inst_in[11:7];
assign rs1 = inst_in[19:15];
assign rs2 = inst_in[24:20];
assign imm = inst_in[31:20];

endmodule 

module Lab7_Truex_tb;

reg clk, reset;
wire [4:0]rd;
wire [4:0]rs1;
wire [4:0]rs2;
wire [11:0]imm;

Lab7_Truex dut(.clk(clk), .reset(reset), .rd(rd), .rs1(rs1), .rs2(rs2), .imm(imm));

initial begin

clk = 0;
forever #5 clk = ~clk;

end 

initial begin

reset = 1;
#10 reset = 0;
#100 reset = 1;
#10 reset = 0;

end
endmodule
