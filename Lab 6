module Lab6_Truex(clk, address, inst_out);

input clk;
input [7:0]address;
output reg [31:0]inst_out;

always @(clk, address) begin
case (address)

//a1 is n, a3 points to a[0], a4 is i, a5 is j, a6 is x
8'd00: inst_out = 32'h00450693; // addi a3, a0, 4 	#a3 is pointer to a[i]
8'd04: inst_out = 32'h00100713; // addi a4, x0, 1 	#i = 1
//outer loop
8'd08: inst_out = 32'h00b76463; // bltu a4, a1, 10 	#if i < n, jump to continue outer loop
//exit outer loop
8'd12: inst_out = 32'h00008067; // jalr x0, x1, 0 		#return from function
//continue outer loop
8'd10: inst_out = 32'h0006a803; // lw a6, 0(a3) 		#x = a[i]
8'd14: inst_out = 32'h00068613; // addi a2, a3, 0 		#a2 is pointer to a[j]
8'd18: inst_out = 32'h00070793; // addi a5, a4, 0 		#j = i
//inner loop
8'd22: inst_out = 32'hffc62883; // lw a7, -4(a2) 		#a7 = a[j-1]
8'd20: inst_out = 32'h01185a63; // bge a6, a7, 34 		#if a[j-1] <= a[i], jump to exit inner loop
8'd24: inst_out = 32'h01162023; // sw a7, 0(a2) 		#a[j] = a[j-1]
8'd28: inst_out = 32'hfff78793; // addi a5, a5, -1 	#j--
8'd32: inst_out = 32'hffc60613; // addi a2, a2, -4		#decrement to a2 to point to a[j]
8'd30: inst_out = 32'hfe0796e3; // bne a5, x0, 1c 		#if j != 0, jump to inner loop
//exit inner loop
8'd34: inst_out = 32'h00279793; // slli a5, a5, 0x2 	#multiply a5 by 4
8'd38: inst_out = 32'h00f507b3; // add a5, a0, a5 		#a5 is now byte address oi a[j]
8'd42: inst_out = 32'h0107a023; // sw a6, 0(a5) 		#a[j] = x
8'd40: inst_out = 32'h00170713; // addi a4, a4, 1 		#i++
8'd44: inst_out = 32'h00468693; // addi a3, a3, 4 		#increment a3 to point to a[i]
8'd48: inst_out = 32'hfc1ff06f; // jal x0, 8 			#jump to outer loop

endcase
end

endmodule 

//testbench
module Lab6_Truex_tb;

reg clk;
reg [7:0]address;
wire [31:0]inst_out;

Lab6_Truex dut(.clk(clk), .address(address), .inst_out(inst_out));

initial begin

clk = 0;
forever #5 clk = ~clk;

end 

initial begin

#10 address = 8'd00;
#10 address = 8'd04;
#10 address = 8'd08;
#10 address = 8'd12;
#10 address = 8'd10;
#10 address = 8'd14;
#10 address = 8'd18;
#10 address = 8'd22;
#10 address = 8'd20;
#10 address = 8'd24;
#10 address = 8'd28;
#10 address = 8'd32;
#10 address = 8'd30;
#10 address = 8'd34;
#10 address = 8'd38;
#10 address = 8'd42;
#10 address = 8'd40;
#10 address = 8'd44;
#10 address = 8'd48;

end
endmodule 
